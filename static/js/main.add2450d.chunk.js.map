{"version":3,"sources":["Redux/contacts/contacts-actions.js","ContactList/ContactsList.js","Filter/Filter.js","Forms/AddContactForm.js","App.js","Redux/contacts/contacts-reducer.js","Redux/store.js","index.js"],"names":["addContact","createAction","data","payload","id","uuidv4","name","number","deleteContact","updateFilter","ContactsList","contacts","useSelector","state","allContacts","filter","normalizedFilter","toLowerCase","contact","includes","getVisibleContacts","items","dispatch","useDispatch","className","map","type","onClick","actions","Filter","value","onChange","e","target","Form","useState","setName","setNumber","handleChange","event","resetForm","onSubmit","preventDefault","some","item","alert","pattern","title","required","App","createReducer","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","persistReducer","contactsReducer","moduleDefaultForExport","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.add2450d.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const addContact = createAction('contacts/Add', data => ({\n  payload: {\n    id: uuidv4(),\n    name: data.name,\n    number: data.number,\n  },\n}));\n\nexport const deleteContact = createAction('contacts/Delete');\n\nexport const updateFilter = createAction('contacts/UpdateFilter');\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as actions from '../Redux/contacts/contacts-actions';\nimport './ContactList.css';\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return allContacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nexport default function ContactsList() {\n  const contacts = useSelector(state =>\n    getVisibleContacts(state.contacts.items, state.contacts.filter),\n  );\n\n  const dispatch = useDispatch();\n\n  return (\n    <ul className=\"contactsList\">\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className=\"item\">\n          <span className=\"itemText\">\n            <span className=\"itemName\">{name}:</span>\n            <span className=\"itemNum\">{number}</span>\n          </span>\n\n          <button\n            type=\"button\"\n            onClick={() => dispatch(actions.deleteContact(id))}\n            className=\"button\"\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as actions from '../Redux/contacts/contacts-actions';\nimport './Filter.css';\n\nexport default function Filter() {\n  const value = useSelector(state => state.contacts.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"filter\">\n      <label>\n        <span className=\"filterText\">Filter</span>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={e => dispatch(actions.updateFilter(e.target.value))}\n        />\n      </label>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as actions from '../Redux/contacts/contacts-actions';\n\nexport default function Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const items = useSelector(state => state.contacts.items);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (items.some(item => item.name === name)) {\n      alert(`${name} already exist in contact list`);\n      return;\n    }\n\n    dispatch(actions.addContact({ name, number }));\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"form\">\n      <label>\n        <h2>Name</h2>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        <h2>Number</h2>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button type=\"submit\" className=\"button\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import React from 'react';\nimport ContactsList from './ContactList/ContactsList';\nimport Filter from './Filter/Filter';\nimport Form from './Forms/AddContactForm';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"formsContainer\">\n        <Form />\n      </div>\n\n      <div className=\"contactsContainer\">\n        <div className=\"contacts\">\n          <h2>Contacts</h2>\n          <Filter />\n          <ContactsList />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as actions from './contacts-actions';\n\nconst itemsInitialState = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nconst items = createReducer(itemsInitialState, {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(item => item.id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.updateFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst contactsPersistConfig = {\n  key: 'Contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\n// чтоб убрать ошибку из консоли\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  //devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nconst moduleDefaultForExport = { store, persistor };\n\nexport default moduleDefaultForExport;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\nimport store from './Redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}